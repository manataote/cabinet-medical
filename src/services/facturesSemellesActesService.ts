import { supabase } from '../config/supabase';
import { ActeOrthopedique } from '../types';
import { log } from '../utils/logger';

export interface FacturesSemellesActeOrthopedique {
  id: string;
  facture_semelles_id: string;
  acte_orthopedique_id: string;
  created_at: string;
  updated_at: string;
}

export class FacturesSemellesActesService {
  /**
   * Ajoute un acte orthop√©dique √† une facture semelles
   */
  static async addActeOrthopediqueToFacture(
    factureSemellesId: string, 
    acteOrthopediqueId: string
  ): Promise<void> {
    try {
      log.info('üìù Ajout d\'un acte orthop√©dique √† la facture semelles...', { 
        factureSemellesId, 
        acteOrthopediqueId 
      });

      const { error } = await supabase
        .from('factures_semelles_actes_orthopediques')
        .insert({
          facture_semelles_id: factureSemellesId,
          acte_orthopedique_id: acteOrthopediqueId
        });

      if (error) {
        log.error('‚ùå Erreur lors de l\'ajout de l\'acte orthop√©dique √† la facture:', error);
        throw new Error(`Erreur lors de l'ajout de l'acte orthop√©dique: ${error.message}`);
      }

      log.info('‚úÖ Acte orthop√©dique ajout√© √† la facture avec succ√®s');
    } catch (error) {
      log.error('‚ùå Erreur dans addActeOrthopediqueToFacture:', error);
      throw error;
    }
  }

  /**
   * Supprime un acte orthop√©dique d'une facture semelles
   */
  static async removeActeOrthopediqueFromFacture(
    factureSemellesId: string, 
    acteOrthopediqueId: string
  ): Promise<void> {
    try {
      log.info('üóëÔ∏è Suppression d\'un acte orthop√©dique de la facture semelles...', { 
        factureSemellesId, 
        acteOrthopediqueId 
      });

      const { error } = await supabase
        .from('factures_semelles_actes_orthopediques')
        .delete()
        .eq('facture_semelles_id', factureSemellesId)
        .eq('acte_orthopedique_id', acteOrthopediqueId);

      if (error) {
        log.error('‚ùå Erreur lors de la suppression de l\'acte orthop√©dique de la facture:', error);
        throw new Error(`Erreur lors de la suppression de l'acte orthop√©dique: ${error.message}`);
      }

      log.info('‚úÖ Acte orthop√©dique supprim√© de la facture avec succ√®s');
    } catch (error) {
      log.error('‚ùå Erreur dans removeActeOrthopediqueFromFacture:', error);
      throw error;
    }
  }

  /**
   * Met √† jour tous les actes orthop√©diques d'une facture semelles
   */
  static async updateActesOrthopediquesForFacture(
    factureSemellesId: string, 
    actesOrthopediques: ActeOrthopedique[]
  ): Promise<void> {
    try {
      log.info('üìù Mise √† jour des actes orthop√©diques de la facture semelles...', { 
        factureSemellesId, 
        actesCount: actesOrthopediques.length 
      });

      // Attendre un d√©lai pour s'assurer que la facture est disponible pour les politiques RLS
      log.info('‚è≥ Attente de 500ms pour la disponibilit√© de la facture...');
      await new Promise(resolve => setTimeout(resolve, 500));

      // Supprimer tous les actes existants pour cette facture
      const { error: deleteError } = await supabase
        .from('factures_semelles_actes_orthopediques')
        .delete()
        .eq('facture_semelles_id', factureSemellesId);

      if (deleteError) {
        log.error('‚ùå Erreur lors de la suppression des anciens actes:', deleteError);
        throw new Error(`Erreur lors de la suppression des anciens actes: ${deleteError.message}`);
      }

      // Ajouter les nouveaux actes avec retry en cas d'erreur RLS
      if (actesOrthopediques.length > 0) {
        log.info('üîç Actes orthop√©diques √† ins√©rer:', actesOrthopediques.map(a => ({ id: a.id, codeLPPR: a.codeLPPR, libelleFacture: a.libelleFacture })));
        
        const insertData = actesOrthopediques.map(acte => ({
          facture_semelles_id: factureSemellesId,
          acte_orthopedique_id: acte.id
        }));

        // Syst√®me de retry pour les erreurs RLS
        let retryCount = 0;
        const maxRetries = 3;
        let insertError: any = null;

        while (retryCount < maxRetries) {
          const { error } = await supabase
            .from('factures_semelles_actes_orthopediques')
            .insert(insertData);

          if (!error) {
            // Succ√®s !
            insertError = null;
            break;
          }

          // V√©rifier si c'est une erreur RLS
          if (error.code === '42501' && error.message.includes('row-level security policy')) {
            retryCount++;
            log.warning(`‚ö†Ô∏è Erreur RLS d√©tect√©e, tentative ${retryCount}/${maxRetries}`, { error: error.message });
            
            if (retryCount < maxRetries) {
              // Attendre plus longtemps entre les tentatives
              const delay = 1000 * retryCount; // 1s, 2s, 3s
              log.info(`‚è≥ Attente de ${delay}ms avant la prochaine tentative...`);
              await new Promise(resolve => setTimeout(resolve, delay));
            } else {
              insertError = error;
            }
          } else {
            // Autre type d'erreur, pas de retry
            insertError = error;
            break;
          }
        }

        if (insertError) {
          log.error('‚ùå Erreur lors de l\'ajout des nouveaux actes apr√®s tous les essais:', insertError);
          throw new Error(`Erreur lors de l'ajout des nouveaux actes: ${insertError.message}`);
        }
      }

      log.info('‚úÖ Actes orthop√©diques de la facture mis √† jour avec succ√®s');
    } catch (error) {
      log.error('‚ùå Erreur dans updateActesOrthopediquesForFacture:', error);
      throw error;
    }
  }

  /**
   * R√©cup√®re les actes orthop√©diques de plusieurs factures semelles en une seule requ√™te
   */
  static async getActesOrthopediquesByFactures(factureSemellesIds: string[]): Promise<ActeOrthopedique[]> {
    try {
      if (factureSemellesIds.length === 0) return [];


      const { data, error } = await supabase
        .from('factures_semelles_actes_orthopediques')
        .select(`
          facture_semelles_id,
          actes_orthopediques (
            id,
            code_lppr,
            libelle_interne,
            libelle_facture,
            quantite,
            tarif_base,
            tarif_base_lppr,
            taux_applique,
            regime,
            total,
            part_cps,
            part_patient,
            actif,
            cabinet_id,
            created_at,
            updated_at
          )
        `)
        .in('facture_semelles_id', factureSemellesIds);

      if (error) {
        log.error('‚ùå Erreur lors de la r√©cup√©ration des actes orthop√©diques:', error);
        throw new Error(`Erreur lors de la r√©cup√©ration des actes orthop√©diques: ${error.message}`);
      }

      // Convertir les donn√©es avec coercition num√©rique fiable
      const actesOrthopediques: ActeOrthopedique[] = (data || [])
        .filter((item: any) => item.actes_orthopediques)
        .map((item: any) => ({
          ...this.mapDbToActeOrthopedique(item.actes_orthopediques),
          // Conserver l'ID de la facture pour le regroupement c√¥t√© appelant
          facture_semelles_id: item.facture_semelles_id
        }));

      return actesOrthopediques;

    } catch (error) {
      log.error('‚ùå Erreur dans getActesOrthopediquesByFactures:', error);
      return [];
    }
  }

  /**
   * R√©cup√®re tous les actes orthop√©diques d'une facture semelles
   */
  static async getActesOrthopediquesByFacture(factureSemellesId: string): Promise<ActeOrthopedique[]> {
    try {
      log.info('üîç R√©cup√©ration des actes orthop√©diques de la facture semelles...', { factureSemellesId });

      const { data, error } = await supabase
        .from('factures_semelles_actes_orthopediques')
        .select(`
          actes_orthopediques (
            id,
            code_lppr,
            libelle_interne,
            libelle_facture,
            quantite,
            tarif_base,
            tarif_base_lppr,
            taux_applique,
            regime,
            total,
            part_cps,
            part_patient,
            actif,
            cabinet_id,
            created_at,
            updated_at
          )
        `)
        .eq('facture_semelles_id', factureSemellesId);

      if (error) {
        log.error('‚ùå Erreur lors de la r√©cup√©ration des actes orthop√©diques:', error);
        throw new Error(`Erreur lors de la r√©cup√©ration des actes orthop√©diques: ${error.message}`);
      }

      log.info('‚úÖ Actes orthop√©diques r√©cup√©r√©s avec succ√®s', { count: data?.length || 0 });

      // Convertir les donn√©es vers l'interface ActeOrthopedique avec coercition num√©rique
      return data?.map((item: any) => this.mapDbToActeOrthopedique(item.actes_orthopediques)) || [];
    } catch (error) {
      log.error('‚ùå Erreur dans getActesOrthopediquesByFacture:', error);
      throw error;
    }
  }

  /**
   * Supprime tous les actes orthop√©diques d'une facture semelles
   */
  static async removeAllActesOrthopediquesFromFacture(factureSemellesId: string): Promise<void> {
    try {
      log.info('üóëÔ∏è Suppression de tous les actes orthop√©diques de la facture semelles...', { factureSemellesId });

      const { error } = await supabase
        .from('factures_semelles_actes_orthopediques')
        .delete()
        .eq('facture_semelles_id', factureSemellesId);

      if (error) {
        log.error('‚ùå Erreur lors de la suppression de tous les actes orthop√©diques:', error);
        throw new Error(`Erreur lors de la suppression de tous les actes orthop√©diques: ${error.message}`);
      }

      log.info('‚úÖ Tous les actes orthop√©diques supprim√©s de la facture avec succ√®s');
    } catch (error) {
      log.error('‚ùå Erreur dans removeAllActesOrthopediquesFromFacture:', error);
      throw error;
    }
  }

  /**
   * Convertit les donn√©es de la base vers l'interface ActeOrthopedique
   */
  private static mapDbToActeOrthopedique(data: any): ActeOrthopedique {
    return {
      id: data.id,
      codeLPPR: data.code_lppr,
      libelleInterne: data.libelle_interne,
      libelleFacture: data.libelle_facture,
      quantite: Number(data.quantite || 0),
      tarifBase: Number(data.tarif_base || 0),
      tarifBaseLPPR: Number(data.tarif_base_lppr || data.tarif_base || 0),
      tauxApplique: Number(data.taux_applique || 0),
      regime: data.regime,
      total: Number(data.total || 0),
      partCPS: Number(data.part_cps || 0),
      partPatient: Number(data.part_patient || 0),
      actif: data.actif !== undefined ? data.actif : true
    };
  }
}
